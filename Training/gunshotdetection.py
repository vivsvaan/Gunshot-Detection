# -*- coding: utf-8 -*-
"""GunShotDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VK4IjockamlSTpHZ6VDyGdez2U9xLfQD
"""

from fastai import *
from fastai.vision import *

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

import IPython
IPython.display.Audio("/content/drive/My Drive/GunShot/test/test6.mp3")



import matplotlib.pyplot as plt
from matplotlib.pyplot import specgram
import librosa
import librosa.display
import numpy as np
def create_fold_spectrograms():
    spectrogram_path = Path('/content/drive/My Drive/GunShot/')  
    audio_path = Path('/content/drive/My Drive/GunShot/test/')  
    for audio_file in list(Path(audio_path).glob('*.mp3')):
        samples, sample_rate = librosa.load(audio_file)
        fig = plt.figure(figsize=[0.72,0.72])
        ax = fig.add_subplot(111)
        ax.axes.get_xaxis().set_visible(False)
        ax.axes.get_yaxis().set_visible(False)
        ax.set_frame_on(False)
        filename  = spectrogram_path/Path(audio_file).name.replace('.mp3','.png')
        S = librosa.feature.melspectrogram(y=samples, sr=sample_rate)
        librosa.display.specshow(librosa.power_to_db(S, ref=np.max))
        plt.savefig(filename, dpi=400, bbox_inches='tight',pad_inches=0)
        plt.close('all')

create_fold_spectrograms()

# folder = 'nonGun'
# file = 'random.csv'

path = Path('/content/drive/My Drive/GunShot/test')
# dest = path/folder
# dest.mkdir(parents=True, exist_ok=True)

path.ls()

# download_images(path/file, dest, max_pics=500)

# verify_images(path/folder, delete=True, max_size=500)

np.random.seed(42)
data = ImageDataBunch.from_folder(path, train=".", valid_pct=0.2,
        ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)

data.classes

data.show_batch(rows=5, figsize=(5,6))

data.classes, data.c, len(data.train_ds), len(data.valid_ds)

import os

path, dirs, files = next(os.walk('/content/drive/My Drive/GunShot/dataset/gun/'))
file_count = len(files)

print(file_count)

from fastai.metrics import error_rate, accuracy

learn = cnn_learner(data, models.resnet50, metrics=accuracy)

learn.fit_one_cycle(4)

learn.save('stage-1')

learn.unfreeze()

learn.lr_find()

learn.recorder.plot(suggestion= True)

learn.fit_one_cycle(2, max_lr = slice(1e-6,1e-5))

learn.save('stage-2')

learn.fit_one_cycle(2, max_lr = slice(1e-6,1e-5))

learn.fit_one_cycle(4, max_lr = slice(1e-6,1e-5))

learn.save('stage-3')

learn.fit_one_cycle(4, max_lr = slice(1e-6,1e-5))

learn.save('stage-4')

learn.fit_one_cycle(3, max_lr = slice(1e-6,1e-5))

learn.save('stage-5')

learn.fit_one_cycle(2, max_lr = slice(1e-6,1e-5))

learn.save('stage-6')

learn.fit_one_cycle(3, max_lr = slice(1e-6,1e-5))

learn.fit_one_cycle(3, max_lr = slice(1e-6,1e-5))

learn.save('stage-7')

learn.fit_one_cycle(2, max_lr = slice(1e-6,1e-5))

learn.load('stage-7');

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_confusion_matrix()

learn.export()

img = open_image('/content/drive/My Drive/GunShot/dataset/non gun/1-101296-A-19.png')
img

pred_class,pred_idx,outputs = learn.predict(img)
pred_class